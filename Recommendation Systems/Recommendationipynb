{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "3418e4a0",
   "metadata": {},
   "source": [
    "Bu ödevinizde verilen ratings.csv dosyasını kullanacaksınız. Bu dosyada kullanıcıların farklı ürünler için verdikleri puanlar vardır. En yüksek puan 10'dur.\n",
    "\n",
    "Ödevinizde pandas, numpy kütüphanelerini kullanabilirsiniz. Ayrıca grafik oluşturmak için herhangi bir görselleştirme kütüphanesi kullanabilirsiniz. Bunlar dışında herhangi bir kütüphane kullanamazsınız.\n",
    "\n",
    "Tüm yakınlık hesaplamaları için kosinus benzerliğini kullanınız.\n",
    "\n",
    "**Sorularda belirtilmeyen bir parametre vs. var ise, o kısım sizin dizayn kararınıza bırakılmıştır demektir. Bu durumlarda aldığınız kararı belirtiniz.**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "146281fd",
   "metadata": {},
   "source": [
    "**Soru 1 [5 puan]** İlgili veri kümesinin “ratings.csv” verisinde satır sayısının mod 10’u sıfır olan satırlar test için gerisi eğitim için kullanılacaktır. Yani, 10. 20., 30., … satırlar test için kullanılacaktır. Eğitim ve test kümelerini belirleyiniz. Satırları saymaya 0'dan başlayınız."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "75c2a8ba",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "ratings = pd.read_csv('Ratings.csv')\n",
    "ratings = ratings.drop_duplicates(subset=['User-ID', 'ISBN'], keep='first')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "55bdb46f",
   "metadata": {},
   "outputs": [],
   "source": [
    "import warnings\n",
    "warnings.filterwarnings('ignore')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "51cf52dc",
   "metadata": {},
   "outputs": [],
   "source": [
    "test = ratings.iloc[9::10, :]\n",
    "train = ratings.drop(ratings.index[9::10])\n",
    "\n",
    "train.reset_index(drop=True, inplace=True)\n",
    "test.reset_index(drop=True, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "64a56c89",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Before dropping 0 values:  (943605, 4)\n",
      "After dropping 0 values:  (357457, 4)\n"
     ]
    }
   ],
   "source": [
    "print(\"Before dropping 0 values: \", train.shape)\n",
    "train = train[train['Book-Rating'] != 0]\n",
    "print(\"After dropping 0 values: \", train.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1e173bd4",
   "metadata": {},
   "source": [
    "**Soru 2 [20 puan]** Item bazlı “Collaborative filtering” yöntemini kullanarak en yakın 5 komşuyu göz önünde alarak test kümesinin ilk beş değeri için yapılan tahmin değerlerini ve gerçek değeri gösteriniz. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "147fe057",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "\n",
    "def calculate_similarity(main_vec, other_vec): # pearson correlation coefficient\n",
    "    fill_value = np.nan\n",
    "    filled_main = [fill_value if np.isnan(x) else x for x in main_vec]\n",
    "    main_vec = np.array(filled_main)\n",
    "\n",
    "    filled_other = [fill_value if np.isnan(x) else x for x in other_vec]\n",
    "    other_vec = np.array(filled_other)\n",
    "    \n",
    "    main_vec_indices = np.where(~np.isnan(main_vec))[0]\n",
    "    other_vec_indices = np.where(~np.isnan(other_vec))[0]\n",
    "\n",
    "    common_indices = np.intersect1d(main_vec_indices, other_vec_indices)\n",
    "\n",
    "    if common_indices.size == 0:\n",
    "        return 0\n",
    "    \n",
    "    main_mean = np.nanmean(main_vec)\n",
    "    other_mean = np.nanmean(other_vec)\n",
    "\n",
    "    main_vec_common = main_vec[common_indices]\n",
    "    other_vec_common = other_vec[common_indices]\n",
    "\n",
    "    main_vec_common = main_vec_common - main_mean\n",
    "    other_vec_common = other_vec_common - other_mean\n",
    "\n",
    "    dot_product = np.dot(main_vec_common, other_vec_common)\n",
    "    norm_main = np.linalg.norm(main_vec_common)\n",
    "    norm_other = np.linalg.norm(other_vec_common)\n",
    "\n",
    "    if dot_product == 0:\n",
    "        intersection = np.minimum(main_vec[common_indices], other_vec[common_indices])\n",
    "        union = np.maximum(main_vec[common_indices], other_vec[common_indices])\n",
    "        return np.sum(intersection) / np.sum(union)\n",
    "       \n",
    "    similarity = dot_product / (norm_main * norm_other)\n",
    "    \n",
    "    return similarity"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "79667d32",
   "metadata": {},
   "outputs": [],
   "source": [
    "def Item_item_filter(data, item_id, user_id, k=10, print_output=False):\n",
    "\n",
    "    if item_id not in data['ISBN'].unique():\n",
    "        if print_output:\n",
    "            print(\"Item not found in train data.\")\n",
    "        return None \n",
    "    \n",
    "    if user_id not in data['User-ID'].unique():\n",
    "        if print_output:\n",
    "            print(\"User not found in train data.\")\n",
    "        return None\n",
    "\n",
    "    filtered_data = data[data['User-ID'] == user_id]\n",
    "    item_ids_with_user = filtered_data['ISBN'].tolist()\n",
    "    item_ids_with_user.append(item_id)\n",
    "\n",
    "    temp_data = data[data['ISBN'].isin(item_ids_with_user)]\n",
    "\n",
    "    utility_matrix = temp_data.groupby(['ISBN','User-ID'])['Book-Rating'].max().unstack(fill_value=np.nan)\n",
    "\n",
    "    utility_matrix.index.name = None\n",
    "    utility_matrix.columns.name = None\n",
    "    sparse_dtype = pd.SparseDtype(float, fill_value=np.nan)\n",
    "    utility_matrix = utility_matrix.astype(sparse_dtype)\n",
    "    utility_matrix = utility_matrix.loc[:, ~utility_matrix.columns.duplicated()]\n",
    "\n",
    "    main_vec = utility_matrix.loc[item_id].values\n",
    "\n",
    "    utility_matrix.drop(item_id, axis=0, inplace=True)\n",
    "    utility_matrix['similarity'] = utility_matrix.apply(lambda x: calculate_similarity(main_vec, x.values), axis=1)\n",
    "\n",
    "    most_similar_items = utility_matrix.sort_values(by='similarity', ascending=False).index[:k]\n",
    "\n",
    "    similarities = utility_matrix.loc[most_similar_items]['similarity']\n",
    "    ratings = utility_matrix.loc[most_similar_items][user_id]\n",
    "\n",
    "    if similarities.sum() == 0:\n",
    "        rec_score = data[data['ISBN'] == item_id]['Book-Rating'].mean()\n",
    "        return round(rec_score,2)\n",
    "    \n",
    "    rec_score = round(np.dot(ratings, similarities) / similarities.sum(),2)\n",
    "    \n",
    "    return rec_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "f8fca556",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8976077309958997"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a = [0 , 2, 5 , np.nan, 7, 9, np.nan, 10, 12, 15, np.nan]\n",
    "b = [np.nan, 3, 6, 8, np.nan, 10, 12, np.nan, 14, 16, 18]\n",
    "\n",
    "calculate_similarity(a, b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "860117b0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train shape : (357457, 4)\n",
      "User-ID unique : 66455\n",
      "ISBN unique : 162558\n"
     ]
    }
   ],
   "source": [
    "print(\"Train shape :\", train.shape)\n",
    "print(\"User-ID unique :\", train['User-ID'].nunique())\n",
    "print(\"ISBN unique :\", train['ISBN'].nunique())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "88148807",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>User-ID</th>\n",
       "      <th>ISBN</th>\n",
       "      <th>Book-Rating</th>\n",
       "      <th>Price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>276745</td>\n",
       "      <td>342310538</td>\n",
       "      <td>10</td>\n",
       "      <td>69</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>276747</td>\n",
       "      <td>671537458</td>\n",
       "      <td>9</td>\n",
       "      <td>31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>276755</td>\n",
       "      <td>451166892</td>\n",
       "      <td>5</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>276762</td>\n",
       "      <td>3404611306</td>\n",
       "      <td>0</td>\n",
       "      <td>72</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>276762</td>\n",
       "      <td>3453213025</td>\n",
       "      <td>3</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   User-ID        ISBN  Book-Rating  Price\n",
       "0   276745   342310538           10     69\n",
       "1   276747   671537458            9     31\n",
       "2   276755   451166892            5     13\n",
       "3   276762  3404611306            0     72\n",
       "4   276762  3453213025            3     10"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test.head(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ec365459",
   "metadata": {},
   "source": [
    "**Soru 3 [20 puan]** Kullanıcı bazlı “Collaborative filtering” yöntemini kullanarak en yakın 5 komşuyu göz önünde alarak test kümesinin ilk beş değeri için yapılan tahmin değerlerini ve gerçek değeri gösteriniz."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "f0c1bf9c",
   "metadata": {},
   "outputs": [],
   "source": [
    "def User_user_filter(data, user_id, item_id, k=10, print_output=False):\n",
    "\n",
    "    utility_matrix = None\n",
    "    if item_id not in data['ISBN'].unique():\n",
    "        if print_output:\n",
    "            print(\"Item not found in train data.\")\n",
    "        return None \n",
    "    \n",
    "    if user_id not in data['User-ID'].unique():\n",
    "        if print_output:\n",
    "            print(\"User not found in train data.\")\n",
    "        return None\n",
    "\n",
    "    filtered_data = data[data['ISBN'] == item_id]\n",
    "    user_ids_with_isbn = filtered_data['User-ID'].tolist()\n",
    "    user_ids_with_isbn.append(user_id)\n",
    "\n",
    "    temp_data = data[data['User-ID'].isin(user_ids_with_isbn)]\n",
    "\n",
    "    utility_matrix = temp_data.groupby(['User-ID', 'ISBN'])['Book-Rating'].max().unstack(fill_value=np.nan)\n",
    "\n",
    "    utility_matrix.index.name = None\n",
    "    utility_matrix.columns.name = None\n",
    "    sparse_dtype = pd.SparseDtype(float, fill_value=np.nan)\n",
    "    utility_matrix = utility_matrix.astype(sparse_dtype)\n",
    "    utility_matrix = utility_matrix.loc[:, ~utility_matrix.columns.duplicated()]\n",
    "\n",
    "    main_vec = utility_matrix.loc[user_id].values\n",
    "\n",
    "    utility_matrix.drop(user_id, axis=0, inplace=True)\n",
    "    utility_matrix['similarity'] = utility_matrix.apply(lambda x: calculate_similarity(main_vec, x.values), axis=1)\n",
    "\n",
    "    most_similar_users = utility_matrix.sort_values(by='similarity', ascending=False).index[:k]\n",
    "\n",
    "    similarities = utility_matrix.loc[most_similar_users]['similarity']\n",
    "    ratings = utility_matrix.loc[most_similar_users][item_id]\n",
    "\n",
    "    \n",
    "    if similarities.sum() == 0:\n",
    "        rec_score = data[data['ISBN'] == item_id]['Book-Rating'].mean()\n",
    "        return round(rec_score,2)\n",
    "    \n",
    "    \n",
    "\n",
    "    rec_score = round(np.dot(ratings, similarities) / similarities.sum(),2)\n",
    "    \n",
    "    return rec_score"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3a1cff7a",
   "metadata": {},
   "source": [
    "**Item ya da User'ın train setinde olmadığı durumları çıkarttım. Sadece sonuç hesaplanabilen durumları kullandım. Bunları da manuel belirledim. proper_idx listesine atadım.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "10d04c1c",
   "metadata": {},
   "outputs": [],
   "source": [
    "proper_idx = [1, 13, 18, 21, 28, 36]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "c4312729",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "idx : 1\n",
      "Gerçek Değer : 9\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Tahmin Değeri : 8.0\n",
      "-----------------------------------\n",
      "idx : 13\n",
      "Gerçek Değer : 0\n",
      "Tahmin Değeri : 8.0\n",
      "-----------------------------------\n",
      "idx : 18\n",
      "Gerçek Değer : 7\n",
      "Tahmin Değeri : 7.36\n",
      "-----------------------------------\n",
      "idx : 21\n",
      "Gerçek Değer : 0\n",
      "Tahmin Değeri : 9.0\n",
      "-----------------------------------\n",
      "idx : 28\n",
      "Gerçek Değer : 10\n",
      "Tahmin Değeri : 7.5\n",
      "-----------------------------------\n",
      "idx : 36\n",
      "Gerçek Değer : 7\n",
      "Tahmin Değeri : 6.0\n",
      "-----------------------------------\n"
     ]
    }
   ],
   "source": [
    "for idx in proper_idx:\n",
    "    print(\"idx :\", idx)\n",
    "    user_id = test.iloc[idx]['User-ID']\n",
    "    isbn = test.iloc[idx]['ISBN']\n",
    "    print('Gerçek Değer :' ,test.iloc[idx]['Book-Rating'])\n",
    "    print('Tahmin Değeri :' , User_user_filter(train,  user_id, isbn, k= 5))\n",
    "    print('-----------------------------------')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d79e1221",
   "metadata": {},
   "source": [
    "**Soru 4 [15 puan]**  Item bazlı “Collaborative filtering” yöntemini kullanarak en yakın komşu sayısı 1, 3, 5, ve 7 olduğunda test kümesi üzerinde RMSE değerlerini hesaplayınız ve sonuçlarınızı bir figür ya da tablo gibi açıkca anlaşılacak bir şekilde gösteriniz."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "c928875e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Before : (104845, 4)\n",
      "After : (23910, 4)\n"
     ]
    }
   ],
   "source": [
    "print(\"Before :\",test.shape)\n",
    "\"\"\"\n",
    "0 olanların gerçek değerleri olmadığı için çıkardım.\n",
    "Trainde olmayan kullanıcıları ve kitapları çıkardım.\n",
    "Yoksa RMSE hesaplamak çok uzun sürüyor.\n",
    "Aşağıdaki 4-5. soruları test_ üzerinden yaptım.\n",
    "\"\"\"\n",
    "test = test[test['Book-Rating'] != 0]\n",
    "test = test[test['User-ID'].isin(train['User-ID'])]\n",
    "test = test[test['ISBN'].isin(train['ISBN'])]\n",
    "test.drop_duplicates(subset=['User-ID', 'ISBN'], keep='first', inplace=True)\n",
    "print(\"After :\",test.shape)\n",
    "\n",
    "test_idx = []\n",
    "shift = test.shape[0]//10\n",
    "for i in range(0, test.shape[0], shift):\n",
    "    test_idx.append(i)\n",
    "\n",
    "test_ = test.iloc[test_idx, :]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "686055b3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "k =  1 için RMSE değeri:  2.572158626523644\n",
      "k =  3 için RMSE değeri:  2.5435762225653864\n",
      "k =  5 için RMSE değeri:  2.5575378785073744\n",
      "k =  7 için RMSE değeri:  2.59085314134167\n"
     ]
    }
   ],
   "source": [
    "RMSE_values = []\n",
    "test_predicts = []\n",
    "for k in range(1,8,2):\n",
    "    predict = []\n",
    "    for idx in test_.index:\n",
    "        predict.append(Item_item_filter(train, test_.loc[idx, 'ISBN'], test_.loc[idx, 'User-ID'], k, print_output=False))\n",
    "    test_predicts.append(predict)\n",
    "    test_['predict'] = predict\n",
    "    RMSE = np.sqrt(np.mean((test_['predict'] - test_['Book-Rating'])**2))\n",
    "    RMSE_values.append(RMSE)\n",
    "    print('k = ', k, 'için RMSE değeri: ', RMSE)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "78ffaf8f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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EB0dzdatW/noo49UgPLw+eef07NnT6pWrWosg94CE5cUGxvL3LlzWbZsGWFhYabjuDRvb2/q1KlDixYtiIuLo2nTpowfP950LJeyfv16Tpw4QfPmzfH09MTT05Ply5fz/vvv4+npicPhMB3RpZUrV4569eqxZ88e01FcTmho6J/+2IiMjNRbhnk4ePAgP/74I4MHDzaaQ0eAxKVYlsXjjz/OzJkz+fnnn7WY8Bo4nU4yMzNNx3ApN998M/Hx8Zf820MPPUSDBg34+9//joeHh6FkJUNaWhp79+7lL3/5i+koLqd9+/Z/OlXHrl27iIiIMJTI9X3xxReEhIRw6623Gs2hAlRM0tLSLvnraf/+/WzatIkKFSpQvXp1g8lcS0xMDFOnTmX27NkEBASQlJQEQFBQEH5+fobTuZ6RI0fSs2dPqlevTmpqKlOnTuXnn39m0aJFpqO5lICAgD+tI/P396dixYpaX3YZf/vb37j99tuJiIjg2LFjvPTSS3h4eDBgwADT0VzOk08+Sbt27XjjjTe4++67Wbt2LZ988gmffPKJ6Wguyel08sUXXzBo0CA8PQ1XEEuKxbJlyyzgT5dBgwaZjuZSLvccAdYXX3xhOppL+utf/2pFRERY3t7eVnBwsHXzzTdbixcvNh2rROjcubM1bNgw0zFc0j333GOFhoZa3t7eVrVq1ax77rnH2rNnj+lYLuuHH36woqKiLB8fH6tBgwbWJ598YjqSy1q0aJEFWDt37jQdxbJZlmWZqV4iIiIiZmgRtIiIiLgdFSARERFxOypAIiIi4nZUgERERMTtqACJiIiI21EBEhEREbejAiQiIiJuRwVIRERE3I4KkIi4hS5dujB8+HDTMUTERagAiYiIiNtRARIRERG3owIkIm5p3rx5BAUF8dVXX5mOIiIGGJ5FLyJS/KZOncqjjz7K1KlTue2220zHEREDdARIRNzKhAkTeOyxx/jhhx9UfkTcmI4AiYjb+O677zhx4gS//PILrVq1Mh1HRAzSESARcRvR0dEEBwczadIkLMsyHUdEDFIBEhG3Ubt2bZYtW8bs2bN5/PHHTccREYP0FpiIuJV69eqxbNkyunTpgqenJ++9957pSCJigAqQiLid+vXrs3TpUrp06YKHhwfvvPOO6UgiUsxslt4IFxERETejNUAiIiLidlSARERExO2oAImIiIjbUQESERERt6MCJCIiIm5HBUhERETcjgqQiIiIuB0VIBEREXE7KkAiIiLidlSARERExO2oAImIiIjb+X9l5T4fplNnmAAAAABJRU5ErkJggg==",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "plt.plot(range(1,8,2), RMSE_values)\n",
    "plt.xlabel('k')\n",
    "plt.ylabel('RMSE')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fb0e3856",
   "metadata": {},
   "source": [
    "**Soru 5 [15 puan]**  Kullanıcı bazlı “Collaborative filtering” yöntemini kullanarak en yakın komşu sayısı 1, 3, 5, ve 7 olduğunda test kümesi üzerinde RMSE değerlerini hesaplayınız ve sonuçlarınızı bir figür ya da tablo gibi açıkca anlaşılacak bir şekilde gösteriniz."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "8c1e79d3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "k =  1 için RMSE değeri:  2.046939178383178\n",
      "k =  3 için RMSE değeri:  1.9691978062145001\n",
      "k =  5 için RMSE değeri:  1.9522602285556092\n",
      "k =  7 için RMSE değeri:  1.9628346848372125\n"
     ]
    }
   ],
   "source": [
    "RMSE_values = []\n",
    "test_predicts = []\n",
    "for k in range(1,8,2):\n",
    "    predict = []\n",
    "    for idx in test_.index:\n",
    "        predict.append(User_user_filter(train, test_.loc[idx, 'User-ID'], test_.loc[idx, 'ISBN'], k, print_output=False))\n",
    "    test_predicts.append(predict)\n",
    "    test_['predict'] = predict\n",
    "    RMSE = np.sqrt(np.mean((test_['predict'] - test_['Book-Rating'])**2))\n",
    "    RMSE_values.append(RMSE)\n",
    "    print('k = ', k, 'için RMSE değeri: ', RMSE)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "1b5cb203",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "plt.plot(range(1,8,2), RMSE_values)\n",
    "plt.xlabel('k')\n",
    "plt.ylabel('RMSE')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "27925990",
   "metadata": {},
   "source": [
    "**Soru 6 [25 puan]**  Kullanıcıya döndüğünüz ürünlerden ilk 5'inde 9 veya 10 puan olan ürünleri satın alacak. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "d15e2480",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(144, 4)"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "random_users = np.random.choice(test['User-ID'].unique(), size=50, replace=False)\n",
    "random_test = test[test['User-ID'].isin(random_users)]\n",
    "random_test.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7bacbbb5",
   "metadata": {},
   "source": [
    "**a) Bir kullanıcı maksimum 5 ürün alacaksa, test kümesinde maksimum toplam satış kaç olabilir?** \n",
    "\n",
    "Tüm test verisinde yapmak uzun sürdüğü için yukardaki gibi sample alıp o şekilde yaptım."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "01792ed6",
   "metadata": {},
   "outputs": [],
   "source": [
    "random_test['Predict_by_Item_item'] = random_test.apply(lambda row: Item_item_filter(train, row['ISBN'], row['User-ID'], k = 5), axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "40687592",
   "metadata": {},
   "outputs": [],
   "source": [
    "random_test['Predict_by_User_user'] = random_test.apply(lambda row: User_user_filter(train, row['User-ID'], row['ISBN'], k = 5), axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "202ab923",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "We are predicting total buyable items for 50 users with 144 books reaed by them.\n"
     ]
    }
   ],
   "source": [
    "print(\"We are predicting total buyable items for {} users with {} books reaed by them.\".format(len(random_test[\"User-ID\"].unique()), random_test.shape[0]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "3ecc649b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total Buyable Item for 50 users by Item-item Collaborative filter: 37\n"
     ]
    }
   ],
   "source": [
    "total_buyable_item = 0\n",
    "for user in random_test['User-ID'].unique():\n",
    "    user_df = random_test[random_test['User-ID'] == user]\n",
    "    item_count = 0\n",
    "    for item in user_df['ISBN'].unique():\n",
    "        if user_df[user_df['ISBN'] == item]['Predict_by_Item_item'].values[0] >= 9:\n",
    "            item_count += 1\n",
    "    total_buyable_item += min(item_count, 5)\n",
    "\n",
    "print('Total Buyable Item for {} users by Item-item Collaborative filter: {}'.format(len(random_test['User-ID'].unique()), total_buyable_item))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "560dbda1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total Buyable Item for 50 users by User-user Collaborative filter: 35\n"
     ]
    }
   ],
   "source": [
    "total_buyable_item = 0\n",
    "for user in random_test['User-ID'].unique():\n",
    "    user_df = random_test[random_test['User-ID'] == user]\n",
    "    item_count = 0\n",
    "    for item in user_df['ISBN'].unique():\n",
    "        if user_df[user_df['ISBN'] == item]['Predict_by_User_user'].values[0] >= 9:\n",
    "            item_count += 1\n",
    "    total_buyable_item += min(item_count, 5)\n",
    "\n",
    "print('Total Buyable Item for {} users by User-user Collaborative filter: {}'.format(len(random_test['User-ID'].unique()), total_buyable_item))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cba28cda",
   "metadata": {},
   "source": [
    "**b) Önceki sorularda geliştirdiğiniz kullanıcı bazlı “Collaborative filtering” ve Item bazlı “Collaborative filtering” yöntemlerine göre firmanın kazanacağı parayı hesaplayınız. “Collaborative filtering” yöntemlerinde bakılacak en yakın komşu sayısı 5'tir.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "9e4382e2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total Income for 50 users by Item-item Collaborative filter: 2061\n"
     ]
    }
   ],
   "source": [
    "total_income = 0\n",
    "for user in random_test['User-ID'].unique():\n",
    "    user_df = random_test[random_test['User-ID'] == user]\n",
    "    prices = []\n",
    "    for item in user_df['ISBN'].unique():\n",
    "        if user_df[user_df['ISBN'] == item]['Predict_by_Item_item'].values[0] >= 9:\n",
    "            prices.append(user_df[user_df['ISBN'] == item]['Price'].values[0])\n",
    "\n",
    "    total_income += sum(prices[:5]) if len(prices) >= 5 else sum(prices)\n",
    "\n",
    "\n",
    "print('Total Income for {} users by Item-item Collaborative filter: {}'.format(len(random_test['User-ID'].unique()), total_income))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "2fc2c36d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total Income for 50 users by User-user Collaborative filter: 2022\n"
     ]
    }
   ],
   "source": [
    "total_income = 0\n",
    "for user in random_test['User-ID'].unique():\n",
    "    user_df = random_test[random_test['User-ID'] == user]\n",
    "    prices = []\n",
    "    for item in user_df['ISBN'].unique():\n",
    "        if user_df[user_df['ISBN'] == item]['Predict_by_User_user'].values[0] >= 9:\n",
    "            prices.append(user_df[user_df['ISBN'] == item]['Price'].values[0])\n",
    "\n",
    "    total_income += sum(prices[:5]) if len(prices) >= 5 else sum(prices)\n",
    "\n",
    "\n",
    "print('Total Income for {} users by User-user Collaborative filter: {}'.format(len(random_test['User-ID'].unique()), total_income))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24346883",
   "metadata": {},
   "source": [
    "**c) Firmanın kazandığı parayı da arttıracak şekilde Item bazlı “Collaborative filtering” yöntemini geliştiriniz. Önerdiğiniz yöntem ile ne kadar kazanç olacağını hesaplayınız.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "bbb59617",
   "metadata": {},
   "outputs": [],
   "source": [
    "def book_recommendation(data, user_id):\n",
    "    books_read_by_user = data[data[\"User-ID\"] == user_id]['ISBN'].unique()\n",
    "    \n",
    "    important_users = []\n",
    "    \n",
    "    for user in data['User-ID'].unique():\n",
    "        books_by_user = data[data[\"User-ID\"] == user]['ISBN'].unique()\n",
    "        intersection = np.intersect1d(books_read_by_user, books_by_user)\n",
    "        if len(intersection) == len(books_by_user): # user'a önerebileceğimiz başka kitap yok\n",
    "            continue\n",
    "\n",
    "        if len(intersection) >= 1:\n",
    "            if len(intersection) == 1: \n",
    "                if data[(data[\"User-ID\"] == user) & (data[\"ISBN\"] == intersection[0])]['Book-Rating'].values[0] < 9: # user'ın okuduğu kitap 9'dan küçük puan almışsa\n",
    "                    continue\n",
    "\n",
    "            important_users.append(user)\n",
    "\n",
    "    if important_users == []:\n",
    "        return None\n",
    "\n",
    "    important_users.append(user_id)\n",
    "\n",
    "    check_data = data[data['User-ID'].isin(important_users)]\n",
    "\n",
    "    not_readed_books = check_data[~check_data['ISBN'].isin(books_read_by_user)]['ISBN'].unique()\n",
    "    not_readed_books = check_data[check_data['ISBN'].isin(not_readed_books)].sort_values('Price', ascending = False)['ISBN'].unique() # önce en pahalı kitapları önermeye çalışıyorum\n",
    "\n",
    "    recommended_books = []\n",
    "\n",
    "    for book in not_readed_books:\n",
    "        pred = Item_item_filter(check_data, book, user_id, k = 3)\n",
    "        if pred >= 9: # user 9 üzeri puan vereceği kitapları öneriyoruz\n",
    "            recommended_books.append(book)\n",
    "            if len(recommended_books) == 5: #en fazla 5 kitap alıyor.\n",
    "                break\n",
    "\n",
    "    return recommended_books"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "cfd1647c",
   "metadata": {},
   "outputs": [],
   "source": [
    "random_users = np.random.choice(test['User-ID'], size = 50 , replace = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "1a5c54e3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total income by 50 users is 5335$\n"
     ]
    }
   ],
   "source": [
    "total_income = 0\n",
    "\n",
    "for user in random_users:\n",
    "    recommendations = book_recommendation(train, user)\n",
    "    if recommendations is not None:\n",
    "        for book in recommendations:\n",
    "            book_price = train[train['ISBN'] == book]['Price'].mean()\n",
    "            total_income += book_price\n",
    "\n",
    "print(\"Total income by {} users is {}$\".format(len(random_users), round(total_income)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "491ed930",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f3cf3704",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
